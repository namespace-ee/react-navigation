{"version":3,"sources":["BottomTabView.tsx"],"names":["getHeaderTitle","Header","SafeAreaProviderCompat","Screen","React","Platform","StyleSheet","SafeAreaInsetsContext","BottomTabBarHeightCallbackContext","BottomTabBarHeightContext","BottomTabBar","getTabBarHeight","MaybeScreen","MaybeScreenContainer","BottomTabView","props","tabBar","state","navigation","descriptors","safeAreaInsets","detachInactiveScreens","OS","sceneContainerStyle","scrollEnabled","scrollViewProps","pagingIcons","tabCountPerPage","focusedRouteKey","routes","index","key","loaded","setLoaded","useState","includes","dimensions","initialMetrics","frame","tabBarHeight","setTabBarHeight","layout","width","height","insets","style","options","tabBarStyle","renderTabBar","top","right","bottom","left","styles","container","map","route","descriptor","lazy","unmountOnBlur","isFocused","header","name","absoluteFill","zIndex","headerShown","headerTransparent","headerStatusBarHeight","render","create","flex","overflow"],"mappings":"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","sourcesContent":["import {\n  getHeaderTitle,\n  Header,\n  SafeAreaProviderCompat,\n  Screen,\n} from '@react-navigation/elements';\nimport type {\n  ParamListBase,\n  TabNavigationState,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { Platform, ScrollViewProps, StyleSheet } from 'react-native';\nimport { SafeAreaInsetsContext } from 'react-native-safe-area-context';\n\nimport type {\n  BottomTabBarProps,\n  BottomTabDescriptorMap,\n  BottomTabHeaderProps,\n  BottomTabNavigationConfig,\n  BottomTabNavigationHelpers,\n  BottomTabNavigationProp,\n  ScrollViewPagingIcons,\n} from '../types';\nimport BottomTabBarHeightCallbackContext from '../utils/BottomTabBarHeightCallbackContext';\nimport BottomTabBarHeightContext from '../utils/BottomTabBarHeightContext';\nimport BottomTabBar, { getTabBarHeight } from './BottomTabBar';\nimport { MaybeScreen, MaybeScreenContainer } from './ScreenFallback';\n\ntype Props = BottomTabNavigationConfig & {\n  state: TabNavigationState<ParamListBase>;\n  navigation: BottomTabNavigationHelpers;\n  descriptors: BottomTabDescriptorMap;\n  scrollEnabled?: boolean;\n  scrollViewProps?: ScrollViewProps;\n  pagingIcons?: ScrollViewPagingIcons;\n  tabCountPerPage?: number;\n};\n\nexport default function BottomTabView(props: Props) {\n  const {\n    tabBar = (props: BottomTabBarProps) => <BottomTabBar {...props} />,\n    state,\n    navigation,\n    descriptors,\n    safeAreaInsets,\n    detachInactiveScreens = Platform.OS === 'web' ||\n      Platform.OS === 'android' ||\n      Platform.OS === 'ios',\n    sceneContainerStyle,\n    scrollEnabled,\n    scrollViewProps,\n    pagingIcons,\n    tabCountPerPage,\n  } = props;\n\n  const focusedRouteKey = state.routes[state.index].key;\n  const [loaded, setLoaded] = React.useState([focusedRouteKey]);\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([...loaded, focusedRouteKey]);\n  }\n\n  const dimensions = SafeAreaProviderCompat.initialMetrics.frame;\n  const [tabBarHeight, setTabBarHeight] = React.useState(() =>\n    getTabBarHeight({\n      state,\n      descriptors,\n      dimensions,\n      layout: { width: dimensions.width, height: 0 },\n      insets: {\n        ...SafeAreaProviderCompat.initialMetrics.insets,\n        ...props.safeAreaInsets,\n      },\n      style: descriptors[state.routes[state.index].key].options.tabBarStyle,\n    })\n  );\n\n  const renderTabBar = () => {\n    return (\n      <SafeAreaInsetsContext.Consumer>\n        {(insets) =>\n          tabBar({\n            scrollEnabled,\n            scrollViewProps,\n            tabCountPerPage: tabCountPerPage,\n            pagingIcons,\n            state: state,\n            descriptors: descriptors,\n            navigation: navigation,\n            insets: {\n              top: safeAreaInsets?.top ?? insets?.top ?? 0,\n              right: safeAreaInsets?.right ?? insets?.right ?? 0,\n              bottom: safeAreaInsets?.bottom ?? insets?.bottom ?? 0,\n              left: safeAreaInsets?.left ?? insets?.left ?? 0,\n            },\n          })\n        }\n      </SafeAreaInsetsContext.Consumer>\n    );\n  };\n\n  const { routes } = state;\n\n  return (\n    <SafeAreaProviderCompat>\n      <MaybeScreenContainer\n        enabled={detachInactiveScreens}\n        hasTwoStates\n        style={styles.container}\n      >\n        {routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { lazy = true, unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(route.key) && !isFocused) {\n            // Don't render a lazy screen if we've never navigated to it\n            return null;\n          }\n\n          const {\n            header = ({ layout, options }: BottomTabHeaderProps) => (\n              <Header\n                {...options}\n                layout={layout}\n                title={getHeaderTitle(options, route.name)}\n              />\n            ),\n          } = descriptor.options;\n\n          return (\n            <MaybeScreen\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { zIndex: isFocused ? 0 : -1 }]}\n              visible={isFocused}\n              enabled={detachInactiveScreens}\n            >\n              <BottomTabBarHeightContext.Provider value={tabBarHeight}>\n                <Screen\n                  focused={isFocused}\n                  route={descriptor.route}\n                  navigation={descriptor.navigation}\n                  headerShown={descriptor.options.headerShown}\n                  headerTransparent={descriptor.options.headerTransparent}\n                  headerStatusBarHeight={\n                    descriptor.options.headerStatusBarHeight\n                  }\n                  header={header({\n                    layout: dimensions,\n                    route: descriptor.route,\n                    navigation:\n                      descriptor.navigation as BottomTabNavigationProp<ParamListBase>,\n                    options: descriptor.options,\n                  })}\n                  style={sceneContainerStyle}\n                >\n                  {descriptor.render()}\n                </Screen>\n              </BottomTabBarHeightContext.Provider>\n            </MaybeScreen>\n          );\n        })}\n      </MaybeScreenContainer>\n      <BottomTabBarHeightCallbackContext.Provider value={setTabBarHeight}>\n        {renderTabBar()}\n      </BottomTabBarHeightCallbackContext.Provider>\n    </SafeAreaProviderCompat>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"]}